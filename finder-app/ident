SYSLOG(3)                  Linux Programmer's Manual                 SYSLOG(3)

NNAAMMEE
       closelog, openlog, syslog, vsyslog - send messages to the system logger

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyysslloogg..hh>>

       vvooiidd ooppeennlloogg((ccoonnsstt cchhaarr **_i_d_e_n_t,, iinntt _o_p_t_i_o_n,, iinntt _f_a_c_i_l_i_t_y));;
       vvooiidd ssyysslloogg((iinntt _p_r_i_o_r_i_t_y,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       vvooiidd cclloosseelloogg((vvooiidd));;

       vvooiidd vvssyysslloogg((iinntt _p_r_i_o_r_i_t_y,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       vvssyysslloogg():
           Since glibc 2.19:
               _DEFAULT_SOURCE
           Glibc 2.19 and earlier:
               _BSD_SOURCE

DDEESSCCRRIIPPTTIIOONN
   ooppeennlloogg(())
       ooppeennlloogg() opens a connection to the system logger for a program.

       The  string  pointed  to by _i_d_e_n_t is prepended to every message, and is
       typically set to the program name.  If _i_d_e_n_t is NULL, the program  name
       is  used.   (POSIX.1-2008  does  not specify the behavior when _i_d_e_n_t is
       NULL.)

       The _o_p_t_i_o_n argument specifies flags  which  control  the  operation  of
       ooppeennlloogg()  and subsequent calls to ssyysslloogg().  The _f_a_c_i_l_i_t_y argument es‐
       tablishes a default to be used if none is specified in subsequent calls
       to  ssyysslloogg().  The values that may be specified for _o_p_t_i_o_n and _f_a_c_i_l_i_t_y
       are described below.

       The use of ooppeennlloogg() is optional; it will automatically  be  called  by
       ssyysslloogg() if necessary, in which case _i_d_e_n_t will default to NULL.

   ssyysslloogg(()) aanndd vvssyysslloogg(())
       ssyysslloogg()  generates  a  log  message, which will be distributed by ssyyss‐‐
       llooggdd(8).

       The _p_r_i_o_r_i_t_y argument is formed by ORing together a _f_a_c_i_l_i_t_y value  and
       a  _l_e_v_e_l  value  (described  below).  If no _f_a_c_i_l_i_t_y value is ORed into
       _p_r_i_o_r_i_t_y, then the default value set by ooppeennlloogg() is used, or, if there
       was no preceding ooppeennlloogg() call, a default of LLOOGG__UUSSEERR is employed.

       The  remaining  arguments  are a _f_o_r_m_a_t, as in pprriinnttff(3), and any argu‐
       ments required by the _f_o_r_m_a_t, except that the two-character sequence %%mm
       will be replaced by the error message string _s_t_r_e_r_r_o_r(_e_r_r_n_o).  The for‐
       mat string need not include a terminating newline character.

       The function vvssyysslloogg() performs the same task as ssyysslloogg() with the dif‐
       ference that it takes a set of arguments which have been obtained using
       the ssttddaarrgg(3) variable argument list macros.

   cclloosseelloogg(())
       cclloosseelloogg() closes the file descriptor being used to write to the system
       logger.  The use of cclloosseelloogg() is optional.

   VVaalluueess ffoorr _o_p_t_i_o_n
       The _o_p_t_i_o_n argument to ooppeennlloogg() is a bit mask constructed by ORing to‐
       gether any of the following values:

       LLOOGG__CCOONNSS       Write directly to the system console if there is an  er‐
                      ror while sending to the system logger.

       LLOOGG__NNDDEELLAAYY     Open  the  connection immediately (normally, the connec‐
                      tion is opened when the first message is logged).   This
                      may  be  useful,  for example, if a subsequent cchhrroooott(2)
                      would make the pathname used internally by  the  logging
                      facility unreachable.

       LLOOGG__NNOOWWAAIITT     Don't  wait  for child processes that may have been cre‐
                      ated while logging the message.  (The GNU C library does
                      not create a child process, so this option has no effect
                      on Linux.)

       LLOOGG__OODDEELLAAYY     The converse of LLOOGG__NNDDEELLAAYY; opening of the connection is
                      delayed until ssyysslloogg() is called.  (This is the default,
                      and need not be specified.)

       LLOOGG__PPEERRRROORR     (Not in POSIX.1-2001 or  POSIX.1-2008.)   Also  log  the
                      message to _s_t_d_e_r_r.

       LLOOGG__PPIIDD        Include the caller's PID with each message.

   VVaalluueess ffoorr _f_a_c_i_l_i_t_y
       The  _f_a_c_i_l_i_t_y  argument is used to specify what type of program is log‐
       ging the message.  This lets the configuration file specify  that  mes‐
       sages from different facilities will be handled differently.

       LLOOGG__AAUUTTHH       security/authorization messages

       LLOOGG__AAUUTTHHPPRRIIVV   security/authorization messages (private)

       LLOOGG__CCRROONN       clock daemon (ccrroonn and aatt)

       LLOOGG__DDAAEEMMOONN     system daemons without separate facility value

       LLOOGG__FFTTPP        ftp daemon

       LLOOGG__KKEERRNN       kernel messages (these can't be generated from user pro‐
                      cesses)

       LLOOGG__LLOOCCAALL00 through LLOOGG__LLOOCCAALL77
                      reserved for local use

       LLOOGG__LLPPRR        line printer subsystem

       LLOOGG__MMAAIILL       mail subsystem

       LLOOGG__NNEEWWSS       USENET news subsystem

       LLOOGG__SSYYSSLLOOGG     messages generated internally by ssyyssllooggdd(8)

       LLOOGG__UUSSEERR (default)
                      generic user-level messages

       LLOOGG__UUUUCCPP       UUCP subsystem

   VVaalluueess ffoorr _l_e_v_e_l
       This determines the importance of the message.  The levels are, in  or‐
       der of decreasing importance:

       LLOOGG__EEMMEERRGG      system is unusable

       LLOOGG__AALLEERRTT      action must be taken immediately

       LLOOGG__CCRRIITT       critical conditions

       LLOOGG__EERRRR        error conditions

       LLOOGG__WWAARRNNIINNGG    warning conditions

       LLOOGG__NNOOTTIICCEE     normal, but significant, condition

       LLOOGG__IINNFFOO       informational message

       LLOOGG__DDEEBBUUGG      debug-level message

       The function sseettllooggmmaasskk(3) can be used to restrict logging to specified
       levels only.

AATTTTRRIIBBUUTTEESS
       For an  explanation  of  the  terms  used  in  this  section,  see  aatt‐‐
       ttrriibbuutteess(7).

       ┌──────────────────────┬───────────────┬────────────────────┐
       │IInntteerrffaaccee             │ AAttttrriibbuuttee     │ VVaalluuee              │
       ├──────────────────────┼───────────────┼────────────────────┤
       │ooppeennlloogg(), cclloosseelloogg() │ Thread safety │ MT-Safe            │
       ├──────────────────────┼───────────────┼────────────────────┤
       │ssyysslloogg(), vvssyysslloogg()   │ Thread safety │ MT-Safe env locale │
       └──────────────────────┴───────────────┴────────────────────┘
CCOONNFFOORRMMIINNGG TTOO
       The  functions  ooppeennlloogg(), cclloosseelloogg(), and ssyysslloogg() (but not vvssyysslloogg())
       are specified in SUSv2, POSIX.1-2001, and POSIX.1-2008.

       POSIX.1-2001 specifies only the LLOOGG__UUSSEERR and LLOOGG__LLOOCCAALL** values for  _f_a_‐
       _c_i_l_i_t_y.   However,  with the exception of LLOOGG__AAUUTTHHPPRRIIVV and LLOOGG__FFTTPP, the
       other _f_a_c_i_l_i_t_y values appear on most UNIX systems.

       The LLOOGG__PPEERRRROORR value for _o_p_t_i_o_n is not  specified  by  POSIX.1-2001  or
       POSIX.1-2008, but is available in most versions of UNIX.

NNOOTTEESS
       The  argument  _i_d_e_n_t in the call of ooppeennlloogg() is probably stored as-is.
       Thus, if the string  it  points  to  is  changed,  ssyysslloogg()  may  start
       prepending the changed string, and if the string it points to ceases to
       exist, the results are undefined.  Most portable is  to  use  a  string
       constant.

       Never  pass  a string with user-supplied data as a format, use the fol‐
       lowing instead:

           syslog(priority, "%s", string);

SSEEEE AALLSSOO
       jjoouurrnnaallccttll(1), llooggggeerr(1), sseettllooggmmaasskk(3), ssyysslloogg..ccoonnff(5), ssyyssllooggdd(8)

CCOOLLOOPPHHOONN
       This page is part of release 5.10 of the Linux  _m_a_n_-_p_a_g_e_s  project.   A
       description  of  the project, information about reporting bugs, and the
       latest    version    of    this    page,    can     be     found     at
       https://www.kernel.org/doc/man-pages/.

Linux                             2017-09-15                         SYSLOG(3)
